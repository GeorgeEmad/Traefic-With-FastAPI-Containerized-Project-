services:

  postgres:
    image: postgres:15 # Choose the PostgreSQL version you need
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: ${PostgresUsername}
      POSTGRES_PASSWORD: ${PostgresPassword}
      POSTGRES_DB: fastapi
    ports:
      - "5432:5432" # Maps the container's PostgreSQL port to your local machine
    volumes:
      - postgres-data:/var/lib/postgresql/data # Maps the volume to the container's data directory


  backend:
    build: ./
    restart: always
    # ports:
    #   - "5000:8080" # Expose port 8080 on the host machine
    labels:
      # Enable Traefik for this specific "backend" service
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      - traefik.http.services.app.loadbalancer.server.port=4444
      # Make Traefik use this domain in HTTP
      - traefik.http.routers.app-http.entrypoints=http
      - traefik.http.routers.app-http.rule=Host(`${DOMAIN}`)
      # Use the traefik-public network (declared below)
      - traefik.docker.network=traefik-public
      # Make Traefik use this domain in HTTPS
      - traefik.http.routers.app-https.entrypoints=https
      - traefik.http.routers.app-https.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.app-https.tls=true
      # # Use the "le" (Let's Encrypt) resolver
      - traefik.http.routers.app-https.tls.certresolver=le
      # # https-redirect middleware to redirect HTTP to HTTPS
      # - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      # - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # # Middleware to redirect HTTP to HTTPS
      # - traefik.http.routers.app-http.middlewares=https-redirect
      # - traefik.http.routers.app-https.middlewares=admin-auth
    networks:
      - traefik-public

networks:
  traefik-public:
    external: true

volumes:
  postgres-data:
    driver: local